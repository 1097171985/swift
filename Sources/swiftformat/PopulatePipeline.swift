//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Formatter open source project.
//
// Copyright (c) 2018 Apple Inc. and the Swift Formatter project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Swift Formatter project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is automatically generated with generate-pipeline. Do Not Edit!
import Core
import Rules
import SwiftSyntax

/// Populates the provided pipeline with all implemented formatting and linting passes.
///
/// - Parameter pipeline: The pipeline to populate with passes.
func populate(_ pipeline: Pipeline) {
  /// MARK: File Passes
  pipeline.addFileRule(UseSpecialEscapeSequences.self)
  pipeline.addFileRule(UseOnlySpaces.self)
  pipeline.addFileRule(ValidFilename.self)
  pipeline.addFileRule(UseOnlyUTF8.self)

  /// MARK: Formatting Passes

  pipeline.addFormatter(
    CommaWhitespace.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    NoLabelsInCasePatterns.self,
    for:
      SwitchCaseLabelSyntax.self
  )

  pipeline.addFormatter(
    CommentWhitespace.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    GroupNumericLiterals.self,
    for:
      IntegerLiteralExprSyntax.self
  )

  pipeline.addFormatter(
    OrderedImports.self,
    for:
      SourceFileSyntax.self
  )

  pipeline.addFormatter(
    NoAccessLevelOnExtensionDeclaration.self,
    for:
      ExtensionDeclSyntax.self
  )

  pipeline.addFormatter(
    OneSpaceAfterKeywords.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    CloseBraceWhitespace.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    OneSpaceInsideBraces.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    OperatorWhitespace.self,
    for:
      ExprListSyntax.self,
      CompositionTypeElementListSyntax.self
  )

  pipeline.addFormatter(
    OneCasePerLine.self,
    for:
      EnumDeclSyntax.self
  )

  pipeline.addFormatter(
    UseWhereClausesInForLoops.self,
    for:
      ForInStmtSyntax.self
  )

  pipeline.addFormatter(
    MultiLineTrailingCommas.self,
    for:
      ArrayExprSyntax.self,
      DictionaryExprSyntax.self
  )

  pipeline.addFormatter(
    BlankLineBetweenMembers.self,
    for:
      MemberDeclBlockSyntax.self
  )

  pipeline.addFormatter(
    NoCasesWithOnlyFallthrough.self,
    for:
      SwitchStmtSyntax.self
  )

  pipeline.addFormatter(
    DoNotUseSemicolons.self,
    for:
      CodeBlockSyntax.self,
      SourceFileSyntax.self
  )

  pipeline.addFormatter(
    NoBlockComments.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    ColonWhitespace.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    NoEmptyTrailingClosureParentheses.self,
    for:
      FunctionCallExprSyntax.self
  )

  pipeline.addFormatter(
    UseShorthandTypeNames.self,
    for:
      SimpleTypeIdentifierSyntax.self,
      SpecializeExprSyntax.self
  )

  pipeline.addFormatter(
    CollectionLiteralWhitespace.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    MaximumBlankLines.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    UseTripleSlashForDocumentationComments.self,
    for:
      FunctionDeclSyntax.self,
      EnumDeclSyntax.self,
      InitializerDeclSyntax.self,
      DeinitializerDeclSyntax.self,
      SubscriptDeclSyntax.self,
      ClassDeclSyntax.self,
      VariableDeclSyntax.self,
      StructDeclSyntax.self,
      ProtocolDeclSyntax.self,
      TypealiasDeclSyntax.self,
      ExtensionDeclSyntax.self
  )

  pipeline.addFormatter(
    NoEmptyAssociatedValues.self,
    for:
      EnumCaseDeclSyntax.self
  )

  pipeline.addFormatter(
    OpenBraceWhitespace.self,
    for:
      TokenSyntax.self
  )

  pipeline.addFormatter(
    FullyIndirectEnum.self,
    for:
      EnumDeclSyntax.self
  )

  pipeline.addFormatter(
    UseSingleLinePropertyGetter.self,
    for:
      AccessorBlockSyntax.self
  )

  pipeline.addFormatter(
    CaseIndentLevelEqualsSwitch.self,
    for:
      SwitchStmtSyntax.self
  )

  pipeline.addFormatter(
    ReturnVoidInsteadOfEmptyTuple.self,
    for:
      FunctionTypeSyntax.self
  )

  pipeline.addFormatter(
    AvoidInitializersForLiterals.self,
    for:
      FunctionCallExprSyntax.self
  )

  pipeline.addFormatter(
    UseEnumForNamespacing.self,
    for:
      StructDeclSyntax.self,
      ClassDeclSyntax.self
  )

  pipeline.addFormatter(
    NoParensAroundConditions.self,
    for:
      IfStmtSyntax.self,
      ConditionElementSyntax.self,
      SwitchStmtSyntax.self,
      RepeatWhileStmtSyntax.self
  )

  pipeline.addFormatter(
    OneVariableDeclarationPerLine.self,
    for:
      CodeBlockSyntax.self,
      ClosureExprSyntax.self,
      AccessorBlockSyntax.self,
      SourceFileSyntax.self
  )

  pipeline.addFormatter(
    UseEarlyExits.self,
    for:
      CodeBlockSyntax.self
  )

  pipeline.addFormatter(
    NoVoidReturnOnFunctionSignature.self,
    for:
      FunctionSignatureSyntax.self
  )

  /// MARK: Linting Passes

  pipeline.addLinter(
    OnlyOneTrailingClosureArgument.self,
    for:
      FunctionCallExprSyntax.self
  )

  pipeline.addLinter(
    NeverUseForceTry.self,
    for:
      SourceFileSyntax.self,
      TryExprSyntax.self
  )

  pipeline.addLinter(
    NoLeadingUnderscores.self,
    for:
      AssociatedtypeDeclSyntax.self,
      ClassDeclSyntax.self,
      EnumCaseElementSyntax.self,
      EnumDeclSyntax.self,
      FunctionDeclSyntax.self,
      FunctionParameterSyntax.self,
      GenericParameterSyntax.self,
      IdentifierPatternSyntax.self,
      PrecedenceGroupDeclSyntax.self,
      ProtocolDeclSyntax.self,
      StructDeclSyntax.self,
      TypealiasDeclSyntax.self
  )

  pipeline.addLinter(
    AllPublicDeclarationsHaveDocumentation.self,
    for:
      FunctionDeclSyntax.self,
      InitializerDeclSyntax.self,
      DeinitializerDeclSyntax.self,
      SubscriptDeclSyntax.self,
      ClassDeclSyntax.self,
      VariableDeclSyntax.self,
      StructDeclSyntax.self,
      ProtocolDeclSyntax.self,
      TypealiasDeclSyntax.self
  )

  pipeline.addLinter(
    AmbiguousTrailingClosureOverload.self,
    for:
      SourceFileSyntax.self,
      CodeBlockSyntax.self,
      MemberDeclBlockSyntax.self
  )

  pipeline.addLinter(
    BeginDocumentationCommentWithOneLineSummary.self,
    for:
      FunctionDeclSyntax.self,
      EnumDeclSyntax.self,
      InitializerDeclSyntax.self,
      DeinitializerDeclSyntax.self,
      SubscriptDeclSyntax.self,
      ClassDeclSyntax.self,
      VariableDeclSyntax.self,
      StructDeclSyntax.self,
      ProtocolDeclSyntax.self,
      TypealiasDeclSyntax.self
  )

  pipeline.addLinter(
    UseLetInEveryBoundCaseVariable.self,
    for:
      SwitchCaseLabelSyntax.self
  )

  pipeline.addLinter(
    ValidateDocumentationComments.self,
    for:
      FunctionDeclSyntax.self
  )

  pipeline.addLinter(
    NeverUseImplicitlyUnwrappedOptionals.self,
    for:
      SourceFileSyntax.self,
      VariableDeclSyntax.self
  )

  pipeline.addLinter(
    UseSynthesizedInitializer.self,
    for:
      StructDeclSyntax.self
  )

  pipeline.addLinter(
    DontRepeatTypeInStaticProperties.self,
    for:
      ClassDeclSyntax.self,
      EnumDeclSyntax.self,
      ProtocolDeclSyntax.self,
      StructDeclSyntax.self,
      ExtensionDeclSyntax.self
  )

  pipeline.addLinter(
    NeverForceUnwrap.self,
    for:
      SourceFileSyntax.self,
      ForcedValueExprSyntax.self,
      AsExprSyntax.self
  )

  pipeline.addLinter(
    IdentifiersMustBeASCII.self,
    for:
      IdentifierPatternSyntax.self
  )

  pipeline.addLinter(
    AlwaysUseLowerCamelCase.self,
    for:
      VariableDeclSyntax.self,
      FunctionDeclSyntax.self,
      EnumCaseElementSyntax.self
  )
}
